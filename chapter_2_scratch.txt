Could not locate Gemfile or .bundle/ directory

16:02 in ~
❯ scheme
MIT/GNU Scheme running under OS X
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2014 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Saturday May 17, 2014 at 2:39:25 AM
  Release 9.2 || Microcode 15.3 || Runtime 15.7 || SF 4.41 || LIAR/x86-64 4.118 || Edwin 3.116

1 ]=> (define (sum-odd-squares tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares (car tree))
                 (sum-odd-squares (cdr tree))))))

;Value: sum-odd-squares

1 ]=> (define (even-fibs n)
  (define (next k)
    (if (> k n)
        nil
        (let ((f (fib k)))
          (if (even? f)
              (cons f (next (+ k 1)))
              (next (+ k 1))))))
  (next 0))

;Value: even-fibs

1 ]=> (define (fib n)
        (if (< n 2)
            1
            (+ (fib (- n 1)) (fib (- n 2))))
)

;Value: fib

1 ]=> (fib 3)

;Value: 3

1 ]=> (fib 5)

;Value: 8

1 ]=> (fib 1)

;Value: 1

1 ]=> (fib 0)

;Value: 1

1 ]=> (define our_list (list 1 2 3 4 5 6 7 8 9 10))

;Value: our_list

1 ]=> our_list

;Value 13: (1 2 3 4 5 6 7 8 9 10)

1 ]=> (define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

;Value: accumulate

1 ]=> (accumulate fib 0 our_list)

;The procedure #[compound-procedure 14 fib] has been called with 2 arguments; it requires exactly 1 argument.
;To continue, call RESTART with an option number:
; (RESTART 1) => Return to read-eval-print level 1.

2 error> (accumulate cons nil our_list)

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 4) => Specify a value to use instead of nil.
; (RESTART 3) => Define nil to a given value.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

3 error> (accumulate cons () our_list)

;Value 15: (1 2 3 4 5 6 7 8 9 10)

3 error> (map fib our_list)

;Value 16: (1 2 3 5 8 13 21 34 55 89)

3 error> (cons 1 (2, 3))

;Unbound variable: unquote
;To continue, call RESTART with an option number:
; (RESTART 5) => Specify a value to use instead of unquote.
; (RESTART 4) => Define unquote to a given value.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

4 error> (cons 1 (2 3))

;The object 2 is not applicable.
;To continue, call RESTART with an option number:
; (RESTART 5) => Specify a procedure to use in its place.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

5 error> (cons 1  '(2 3))

;Value 17: (1 2 3)

5 error> (define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

;Value: filter

5 error> (filter even? (list 1 2 3 4))

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 7) => Specify a value to use instead of nil.
; (RESTART 6) => Define nil to a given value.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

6 error> (filter odd? (list 1 2 3 4 5))

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 8) => Specify a value to use instead of nil.
; (RESTART 7) => Define nil to a given value.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

7 error> (define (even? n (= (% n 2) 0)))

;Ill-formed special form: (define (even? n ...))
;To continue, call RESTART with an option number:
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

8 error> (define (even? n (= (% n 2) 0)))

;Ill-formed special form: (define (even? n ...))
;To continue, call RESTART with an option number:
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

9 error> (define (even n (= (% n 2) 0)))

;Ill-formed special form: (define (even n ...))
;To continue, call RESTART with an option number:
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

10 error> (define (even n) (= (% n 2) 0)))

;Value: even

10 error> (even 5)

;Unbound variable: %
;To continue, call RESTART with an option number:
; (RESTART 12) => Specify a value to use instead of %.
; (RESTART 11) => Define % to a given value.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

11 error> (define (even n) (= (modulo n 2) 0)))

;Value: even

11 error> (even 5)

;Value: #f

11 error> (even 6)

;Value: #t

11 error> (filter even our_list)

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 13) => Specify a value to use instead of nil.
; (RESTART 12) => Define nil to a given value.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

12 error> (car our_list)

;Value: 1

12 error> (cdr our_list)

;Value 18: (2 3 4 5 6 7 8 9 10)

12 error> (define our_list_2 (list 1 2 3 4 5 6 7 8 9 10 nil))

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 14) => Specify a value to use instead of nil.
; (RESTART 13) => Define nil to a given value.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

13 error> nil

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 15) => Specify a value to use instead of nil.
; (RESTART 14) => Define nil to a given value.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

14 error> (nil)

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 16) => Specify a value to use instead of nil.
; (RESTART 15) => Define nil to a given value.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

15 error> (define our_list_2 (list 1 2 3 4 5 6 7 8 9 10 1000))

;Value: our_list_2

15 error> (define (filter predicate sequence)
^C
Interrupt option (? for help):

^B: Enter a breakpoint loop.
^C: Goto to top level read-eval-print (REP) loop.
^L: Clear the screen.
^U: Up to previous (lower numbered) REP loop.
^X: Abort to current REP loop.
D: Debugging: change interpreter flags.
E: Examine memory location.
H: Print simple information on interrupts.
I: Ignore interrupt request.
Q: Quit instantly, killing Scheme.
R: Hard reset, possibly killing Scheme in the process.
T: Stack trace.
Z: Quit instantly, suspending Scheme.

Interrupt option (? for help):
;Break!
;To continue, call RESTART with an option number:
; (RESTART 16) => Continue from breakpoint.
; (RESTART 15) => Return to read-eval-print level 15.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

16 break> (define (filter predicate sequence)
  (cond ((null? sequence) nil)
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

;Value: filter

16 break> (filter odd? (list 1 2 3 4 5))

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 18) => Specify a value to use instead of nil.
; (RESTART 17) => Define nil to a given value.
; (RESTART 16) => Return to read-eval-print level 16.
; (RESTART 15) => Return to read-eval-print level 15.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

17 error> (filter even (list 1 2 3 4 5))

;Unbound variable: nil
;To continue, call RESTART with an option number:
; (RESTART 19) => Specify a value to use instead of nil.
; (RESTART 18) => Define nil to a given value.
; (RESTART 17) => Return to read-eval-print level 17.
; (RESTART 16) => Return to read-eval-print level 16.
; (RESTART 15) => Return to read-eval-print level 15.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

18 error> (define (filter predicate sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

;Value: filter

18 error> (filter even (list 1 2 3 4 5))

;Value 19: (2 4)

18 error> (accumulate cons '() (filter even (map fib our_list)))

;Value 20: (2 8 34)


--------------------------------------------------------------------------------

(define (filter predicate sequence)
  (cond ((null? sequence) '())
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

our_list
map fib our_list
filter by even
accumulate

(accumulate cons '() (filter even (map fib our_list)))
